plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.1.1"
    id 'jacoco'
    id "java"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    group = 'com.meli.mutants'
    sourceCompatibility = '1.8'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation 'ch.qos.logback:logback-classic'
        implementation 'ch.qos.logback:logback-core'
        implementation 'org.slf4j:slf4j-api'
        implementation 'org.projectlombok:lombok:1.18.10'
        implementation 'org.mapstruct:mapstruct:1.4.2.Final'
        implementation 'org.springframework:spring-context'
        implementation 'org.springframework:spring-core'
        implementation 'org.springframework:spring-context-support'

         annotationProcessor 'org.projectlombok:lombok:1.18.10'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

        testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'
        testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${spring_dependencies_version}")
        }
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
            property "sonar.exclusions", "**/*Test*/**"
        }
    }

    publishing {

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("${github_packages_url}/meli-mutants-api")
                credentials {
                    username = System.getenv("GH_PACKAGES_USERNAME")
                    password = System.getenv("GH_PACKAGES_TOKEN")
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 1.0
                }
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task version() {
    doLast {
        println project.version
    }
}